def on_reset($scratch_space: [Int], test: Int) {

    var text = _default(:String)

    let len = text.len()

    let aa = 0 -> 5

    if len > 12 {
        exit(1)
    }

    {
        while len > 0 {
            print(len)
        }
    }
}

///assume dot do_magic(a: @Any, b: @Any) String
binary -> (a: Int, b: Int) String {
    return a.do_magic(b)
}

const A = <U64>0
var b = <S65>0
def x() {
    .b = A
}

def get_input($scratch_space: [Int], tick: Int, $inputs: [Int]) {

    var a = random(256)
    var b = random(256)

    inputs[0] = a
    inputs[1] = b

    def test_func() Int {
        return .b
    }

    dot test_meth(x: Int) Int {
        return x * .a
    }

    switch tick
        0 {set_error("zer0")}
        0 + 1 {set_error("0ne")}
        0 - 1 {set_error("-0ne")}
        0 - 1 {set_error("-0ne")}
        0 - 1 {set_error("-0ne")}
        2 * 1 {set_error("tw0")}
        1 | 2 {set_error("three")}
        4 / 1 {set_error("f0ur")}
        [5,4,3,2][0] {set_error("five")}
        12 >> 1 {set_error("six")}
        15 & 23 {set_error("seven")}
        247 ^ 255 {set_error("eight")}
        999 % 10 {set_error("nine")}
        5 << 1 {set_error("ten")}
        a / 10 {set_error("ai_over_ten")}
        test_func() {set_error("bee")}
        3.test_meth() {set_error("three_ai")}
        tick {set_error("tick")}
        default {set_error("default")}

    //ui_set_text("description", `What is {a} * {b}?`)

    switch true
        tick > 1 {set_error("greater_than_0ne")}
        tick == 1 {set_error("0ne")}
        tick < 1 {set_error("less_than_0ne")}
}

var xx = 12
while xx > 1 {
    print(xx)
    xx -= 1
}

//# 3:16-3:33 -Hint -This value could be replaced with ""
//# 7:14-7:20 -Error -Cannot find `dot do_magic(a: Int,b: Int) String`, which is needed for this function to work
//# 14:15-14:23 -Warning -This while statement is an infinite loop (no condition modification inside, no returns or breaks)
//# 49:9-49:14 -Hint -This value could be replaced with 1
//# 50:9-50:14 -Hint -This value could be replaced with -1
//# 51:9-51:14 -Hint -This value could be replaced with -1
//# 51:9-51:14 -Error -This switch block already has this case specified
//# 52:9-52:14 -Hint -This value could be replaced with -1
//# 52:9-52:14 -Error -This switch block already has this case specified
//# 53:9-53:14 -Hint -This value could be replaced with 2
//# 54:9-54:14 -Hint -This value could be replaced with 3
//# 55:9-55:14 -Hint -This value could be replaced with 4
//# 57:9-57:16 -Hint -This value could be replaced with 6
//# 58:9-58:16 -Hint -This value could be replaced with 7
//# 59:9-59:18 -Hint -This value could be replaced with 8
//# 60:9-60:17 -Hint -This value could be replaced with 9
//# 61:9-61:15 -Hint -This value could be replaced with 10
