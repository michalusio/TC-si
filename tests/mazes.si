var mazes = [[
    0b1111111111111111111111111,
    0b1000100000001010001000001,
    0b1110111110111010111011101,
    0b1000100010000010000010101,
    0b1011101111101110111010101,
    0b1010101010000000101010001,
    0b1010101011111011101110111,
    0b1000000000000010000000001,
    0b1111111111111111111111111,
],[
    0b1111111111111111111111111,
    0b1000101000000010000000001,
    0b1010001011101110111011101,
    0b1010100000100010100010101,
    0b1010101110111010111110101,
    0b1010100010001010101010001,
    0b1111101111111010101010111,
    0b1000000000100000001000001,
    0b1111111111111111111111111,
],[
    0b1111111111111111111111111,
    0b1000000000100000000010001,
    0b1011111110111011111111101,
    0b1010101000100010001000001,
    0b1010101110101110101111101,
    0b1000101010000000100010001,
    0b1011101010111110111010111,
    0b1000001000000010100000001,
    0b1111111111111111111111111,
],[
    0b1111111111111111111111111,
    0b1000001000000010000000001,
    0b1010111111101010111011111,
    0b1010000010001000100000001,
    0b1010111010111011111111101,
    0b1010100010001010100000001,
    0b1010101110101010111011101,
    0b1010100000101000100000101,
    0b1111111111111111111111111,
],[
    0b1111111111111111111111111,
    0b1000000000000000000000001,
    0b1111101011111011101110111,
    0b1000101000100000100010101,
    0b1110111011101110101110101,
    0b1000100000101000101010101,
    0b1011101111111011101011101,
    0b1000000000100000100000001,
    0b1111111111111111111111111,
],[
    0b1111111111111111111111111,
    0b1010000000100000001000001,
    0b1011101111111011111110101,
    0b1000001000101010100010101,
    0b1110101011101010101011101,
    0b1010100010000010001000001,
    0b1010111010111110111011101,
    0b1000100000000000001010001,
    0b1111111111111111111111111,
],[
    0b1111111111111111111111111,
    0b1010000000001000100010001,
    0b1010101111101110111010101,
    0b1000101000000010000000101,
    0b1110111111111111101111101,
    0b1000100000000000000010001,
    0b1010101110111010101111101,
    0b1010001000100010101000001,
    0b1111111111111111111111111,
],[
    0b1111111111111111111111111,
    0b1000000000000000100000001,
    0b1111101110111110111010101,
    0b1000001000100000000010101,
    0b1110111011111011111010101,
    0b1000100000001000100010101,
    0b1111101110111111101011101,
    0b1000000010100000001010001,
    0b1111111111111111111111111,
]]

const X = 0
const Y = 1
const ROT = 2
const MAZE = 3

def looking_at($scratch_space: [Int], x: Int, y: Int) Int {
    let row = .mazes[scratch_space[MAZE]][y]
    return ((row >> (25 - x)) & 1)
}

def is_wall($scratch_space: [Int], x: Int, y: Int) Bool {
    return looking_at($scratch_space, x, y) == 1
}

def set_state($scratch_space: [Int], x: Int, y: Int, rotation: Int) {

    scratch_space[X] = x
    scratch_space[Y] = y
    scratch_space[ROT] = rotation

    ui_set_hidden("robot_0", true)
    ui_set_hidden("robot_1", true)
    ui_set_hidden("robot_2", true)
    ui_set_hidden("robot_3", true)

    let x_px = - 13 * 24 - 12 + x * 24
    let y_px = y * 24 + 8

    var lx = 0
    var ly = 0
    var wall = false

    switch rotation
        0 { 
            lx = x_px
            ly = y_px - 24
            ui_set_position("robot_0", x_px, y_px)
            ui_set_hidden("robot_0", false)
            wall = is_wall($scratch_space, x, y - 1)
        }
        1 { 
            lx = x_px + 24
            ly = y_px
            ui_set_position("robot_1", x_px, y_px)
            ui_set_hidden("robot_1", false)
            wall = is_wall($scratch_space, x + 1, y)
        }
        2 { 
            lx = x_px
            ly = y_px + 24
            ui_set_position("robot_2", x_px, y_px)
            ui_set_hidden("robot_2", false)
            wall = is_wall($scratch_space, x, y + 1)
        }
        3 { 
            lx = x_px - 24
            ly = y_px
            ui_set_position("robot_3", x_px, y_px)
            ui_set_hidden("robot_3", false)
            wall = is_wall($scratch_space, x - 1, y)
        }

    
    if wall {
        ui_set_position("looking_at_1", lx, ly)
        ui_set_hidden("looking_at_0", true)
        ui_set_hidden("looking_at_1", false)
    } else {
        ui_set_position("looking_at_0", lx, ly)
        ui_set_hidden("looking_at_0", false)
        ui_set_hidden("looking_at_1", true)
    }
    
}

def move($scratch_space: [Int], rotation: Int) {
    var x = scratch_space[X]
    var y = scratch_space[Y]
    var r = scratch_space[ROT]

    switch rotation
        0 {
            r = (r + 3) % 4
        }
        1 {
            switch r
                0 { y -= 1 }
                1 { x += 1 }
                2 { y += 1 }
                3 { x -= 1 }

            if is_wall($scratch_space, x, y) {
                x = scratch_space[X]
                y = scratch_space[Y]
            }

        }
        2 {
            r = (r + 1) % 4
        }

    set_state($scratch_space, x, y, r)

}

def on_manual_input($scratch_space: [Int], input: Int) {

    if input < 4 {
        move($scratch_space, input)
    }

}

def on_reset($scratch_space: [Int], test: Int) {

    scratch_space[MAZE] = test

    ui_set_hidden("maze_0", true)
    ui_set_hidden("maze_1", true)
    ui_set_hidden("maze_2", true)
    ui_set_hidden("maze_3", true)
    ui_set_hidden("maze_4", true)
    ui_set_hidden("maze_5", true)
    ui_set_hidden("maze_6", true)
    ui_set_hidden("maze_7", true)
    
    switch test
        0 { ui_set_hidden("maze_0", false) }
        1 { ui_set_hidden("maze_1", false) }
        2 { ui_set_hidden("maze_2", false) }
        3 { ui_set_hidden("maze_3", false) }
        4 { ui_set_hidden("maze_4", false) }
        5 { ui_set_hidden("maze_5", false) }
        6 { ui_set_hidden("maze_6", false) }
        7 { ui_set_hidden("maze_7", false) }

    set_state($scratch_space, 24, 7, 3)

}

def arch_get_input($scratch_space: [Int], test: Int) Int {

    var x = scratch_space[X]
    var y = scratch_space[Y]

    switch scratch_space[ROT]
        0 { y -= 1 }
        1 { x += 1 }
        2 { y += 1 }
        3 { x -= 1 }

    return looking_at($scratch_space, x, y)

}

def arch_check_output($scratch_space: [Int], test: Int, input: Int, output: Int) TestResult {

    move($scratch_space, output)

    let x = scratch_space[X]
    let y = scratch_space[Y]
    let r = scratch_space[ROT]

    if x == 2 && y == 1 && r == 0 {
        return win
    }

}
//# 237:81-237:91 -Warning -A function with return type has to return a value
